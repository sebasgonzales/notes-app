// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using backend_notes.Models;
using Microsoft.EntityFrameworkCore;

namespace Data.Models;

public partial class notesContext : DbContext
{
    public notesContext(DbContextOptions<notesContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Account { get; set; }

    public virtual DbSet<Note> Note { get; set; }

    public virtual DbSet<Tag> Tag { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("User_pkey");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('\"User_id_seq\"'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(16)
                .HasColumnName("password");
            entity.Property(e => e.User)
                .IsRequired()
                .HasMaxLength(25)
                .HasColumnName("user");
        });

        modelBuilder.Entity<Note>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("notes_pkey");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('notes_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.IdAccount).HasColumnName("idAccount");
            entity.Property(e => e.IdTag).HasColumnName("idTag");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasDefaultValue(1)
                .HasMaxLength(25)
                .HasColumnName("title");
            entity.Property(e => e.IsArchive)
                .IsRequired()
                .HasDefaultValue(0)
                .HasColumnName("isArchive");

            entity.HasOne(d => d.Account).WithMany(p => p.Notes)
                .HasForeignKey(d => d.IdAccount)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_account");

            entity.HasOne(d => d.Tag).WithMany(p => p.Notes)
                .HasForeignKey(d => d.IdTag)
                .HasConstraintName("fk_tag");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Tag_pkey");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(25)
                .HasColumnName("name");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}